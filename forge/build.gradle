plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    // Protobuf/gRPC dependencies - these are used in common, but we
    // need to shadow these so they don't conflict with the built-in
    // libraries.
    implementation "io.grpc:grpc-protobuf:${rootProject.grpc_version}"
    implementation "io.grpc:grpc-stub:${rootProject.grpc_version}"
    implementation "io.grpc:grpc-netty-shaded:${rootProject.grpc_version}"
    implementation "com.google.guava:guava:29.0-jre"
    shadowCommon "io.grpc:grpc-protobuf:${rootProject.grpc_version}"
    shadowCommon "io.grpc:grpc-stub:${rootProject.grpc_version}"
    shadowCommon "io.grpc:grpc-netty-shaded:${rootProject.grpc_version}"
    shadowCommon "com.google.guava:guava:29.0-jre"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"

    // Relocate files which may conflict with built-in MC libraries
    relocate "com.google", "io.coded.vendor.com.google"
    relocate "google", "io.coded.vendor.google"
    relocate "org.checkerframework", "io.coded.vendor.org.checkerframework"
    relocate "io.grpc", "io.coded.vendor.io.grpc"
    //relocate "javax", "io.coded.vendor.javax"

    mergeServiceFiles()
}

remapJar {
    input = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
