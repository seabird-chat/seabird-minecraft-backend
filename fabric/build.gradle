plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

architectury {
    platformSetupLoomIde()
    fabric()
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"

    // Protobuf/gRPC dependencies - these are used in common, but we
    // need to shadow these so they don't conflict with the built-in
    // libraries.
    shadowCommon "io.grpc:grpc-protobuf:${rootProject.grpc_version}"
    shadowCommon "io.grpc:grpc-stub:${rootProject.grpc_version}"
    shadowCommon "io.grpc:grpc-netty-shaded:${rootProject.grpc_version}"
    shadowCommon "com.google.guava:guava:29.0-jre"

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]

    // Relocate files which may conflict with built-in MC libraries
    relocate "com.google", "io.coded.vendor.com.google"
    relocate "google", "io.coded.vendor.google"
    relocate "org.checkerframework", "io.coded.vendor.org.checkerframework"
    //relocate "io.grpc", "io.coded.vendor.io.grpc"
    //relocate "javax", "io.coded.vendor.javax"

    mergeServiceFiles()

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
